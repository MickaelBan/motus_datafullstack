{"ast":null,"code":"var _jsxFileName = \"/home/samy/ESIEE/E5/motus_datafullstack/front/src/components/Game.tsx\";\nimport React from \"react\";\nimport Board from \"./Board\";\n\n/**\n * turn_index: the current game turn of the user\n * letter_index: the position of the next letter awaiting for input within the grid (essentially a matrix)\n * current_word: a representation of the current word typed by the user\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //This is where we will query our API to get a word\n    this._word_to_guess = \"\";\n    this._word_length = 0;\n    this.state = {\n      turn_index: 1,\n      letter_position: 1,\n      current_user_word: Array()\n    };\n    this._word_to_guess = \"Boajoua\";\n    this._word_length = this._word_to_guess.length;\n    console.log(this.state.current_user_word);\n  }\n  updateUserWord(letter_input, id_to_be_modified) {\n    let newArray = this.state.current_user_word;\n\n    //handling the case where the user wanted to delete the last letter of its word\n    if (letter_input === '.') {\n      newArray.pop();\n    } else {\n      newArray.push(letter_input);\n    }\n    this.setState({\n      current_user_word: newArray\n    });\n    console.log(\"Nouveau mot du user: \" + this.state.current_user_word);\n  }\n\n  //On suppose que l'implémentation sera de telle sorte à ce que \n  //dès qu'un user appuie sur entrée, c'est pour vérifier un mot complet\n  checkAnswer() {\n    let user_answer = this.state.current_user_word.join('');\n    let next_word_to_guess_from = this.state.current_user_word;\n    next_word_to_guess_from[0] = this._word_to_guess[0];\n    for (let i = 1; i < this._word_length; i++) {\n      let index = this._word_to_guess.indexOf(user_answer[i]);\n      //Tant que la lettre apparaît à partir de la position précisée (1 initialement)\n      while (index !== -1) {\n        //cas où la lettre se trouve dans le mot à trouver, mais à une position différente\n        if (i !== index) {\n          console.log(\"OOO\" + i, index);\n          next_word_to_guess_from[i] = '.';\n          //coloration au niveau HTML\n          let yellow_square_index = this._word_length * (this.state.turn_index - 1) + i;\n          let yellow_square = document.getElementById(yellow_square_index.toString());\n          yellow_square.style.backgroundColor = \"yellow\";\n          //modification de la lettre au niveau HTML\n          let modified_square_index = this._word_length * this.state.turn_index + i;\n          const square = document.getElementById(modified_square_index.toString());\n          console.log(i, square);\n          square.innerHTML = '.';\n        } else {\n          next_word_to_guess_from[i] = this._word_to_guess[index];\n          //coloration dans le DOM\n        }\n\n        index = this._word_to_guess.indexOf(user_answer[i], index + 1);\n      }\n      //i == - 1 : à sa position, dans le dom, on aura un point\n    }\n\n    let first_letter = document.getElementById((this._word_length * this.state.turn_index).toString());\n    first_letter.innerHTML = next_word_to_guess_from[0];\n    this.setState({\n      letter_position: this._word_length * this.state.turn_index\n    });\n    this.setState({\n      turn_index: this.state.turn_index + 1\n    });\n    console.log(\"prout\" + this.state.current_user_word);\n  }\n  /**\n   * \n   * @param keyPressed\n   * @param letter_position \n   */\n  modifyLetter(keyPressed, letter_position) {\n    const square = document.getElementById(letter_position.toString());\n    square.innerHTML = keyPressed.toUpperCase();\n\n    //This allows us to use the modifyLetter method to handle the backspace presses\n    let magic = keyPressed === '.' ? -1 : 1;\n    this.setState({\n      letter_position: this.state.letter_position + magic\n    });\n    this.updateUserWord(keyPressed, this.state.letter_position + magic);\n    //TODO: une fonction de création d'un nouvel array avec la nouvelle lettre: args = lettre et id courant\n  }\n  /**\n   * This method is used to handle special characters: Enter, and Backspace, \n   * as they allow the user to either validate a word, or delete a letter from it.\n   * @param p the special key pressed by the user.\n   */\n  handleSpecialCharacters(p) {\n    if (p === \"Enter\") {\n      if (this.state.letter_position !== this._word_length) console.log(\"Mot incomplet\");else {\n        this.checkAnswer();\n      }\n    } else if (p === \"Backspace\") {\n      console.log(\"bp\");\n      if (this.state.letter_position > 1) {\n        this.modifyLetter('.', this.state.letter_position - 1);\n      }\n    }\n  }\n\n  //Method used to handle keyboard inputs\n  handleKeyboardInput(event) {\n    let p = event.key;\n    if (this.state.letter_position % this._word_length !== 0) {\n      console.log(p);\n      let regexp = /^[a-zA-Z]+$/;\n      let a = regexp.test(p);\n      if (a && p.length < 2) {\n        this.modifyLetter(p, this.state.letter_position);\n      }\n    }\n    this.handleSpecialCharacters(p);\n  }\n  componentDidMount() {\n    window.addEventListener(\"keyup\", event => {\n      this.handleKeyboardInput(event);\n    });\n    let beginning_array = this.state.current_user_word;\n    beginning_array.push(this._word_to_guess.charAt(0));\n    this.setState({\n      current_user_word: beginning_array\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        word_length: this._word_length,\n        word: this._word_to_guess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this._word_to_guess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Game;","map":{"version":3,"names":["React","Board","Game","Component","constructor","props","_word_to_guess","_word_length","state","turn_index","letter_position","current_user_word","Array","length","console","log","updateUserWord","letter_input","id_to_be_modified","newArray","pop","push","setState","checkAnswer","user_answer","join","next_word_to_guess_from","i","index","indexOf","yellow_square_index","yellow_square","document","getElementById","toString","style","backgroundColor","modified_square_index","square","innerHTML","first_letter","modifyLetter","keyPressed","toUpperCase","magic","handleSpecialCharacters","p","handleKeyboardInput","event","key","regexp","a","test","componentDidMount","window","addEventListener","beginning_array","charAt","render"],"sources":["/home/samy/ESIEE/E5/motus_datafullstack/front/src/components/Game.tsx"],"sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\n\n/**\n * turn_index: the current game turn of the user\n * letter_index: the position of the next letter awaiting for input within the grid (essentially a matrix)\n * current_word: a representation of the current word typed by the user\n */\ntype GameState = {\n    turn_index: number\n    letter_position: number,\n    current_user_word: Array<string>\n  }\n\n\nclass Game extends React.Component {\n\n    private _word_to_guess: string = \"\";\n    private _word_length: number = 0;\n    \n    state: GameState = {\n        turn_index: 1,\n        letter_position: 1,\n        current_user_word: Array<string>()\n    }\n\n    constructor(props: {} | Readonly<{}>){\n        super(props);\n\n        //This is where we will query our API to get a word\n        this._word_to_guess = \"Boajoua\";\n\n        this._word_length = this._word_to_guess.length;\n\n        console.log(this.state.current_user_word);\n\n    }\n\n\n    updateUserWord(letter_input: string, id_to_be_modified: number): void{\n\n        let newArray: string[] = this.state.current_user_word;\n\n        //handling the case where the user wanted to delete the last letter of its word\n        if (letter_input === '.'){\n            newArray.pop();\n        }\n        else {\n            newArray.push(letter_input);\n        }\n        this.setState({current_user_word: newArray});\n        console.log(\"Nouveau mot du user: \" + this.state.current_user_word);\n    }\n\n\n    //On suppose que l'implémentation sera de telle sorte à ce que \n    //dès qu'un user appuie sur entrée, c'est pour vérifier un mot complet\n    checkAnswer(){\n\n        let user_answer: string = this.state.current_user_word.join('');\n        let next_word_to_guess_from: Array<string> = this.state.current_user_word;\n        next_word_to_guess_from[0] = this._word_to_guess[0];\n\n        for (let i = 1; i < this._word_length; i++){\n            let index = this._word_to_guess.indexOf(user_answer[i]);\n            //Tant que la lettre apparaît à partir de la position précisée (1 initialement)\n            while (index !== -1){\n                //cas où la lettre se trouve dans le mot à trouver, mais à une position différente\n                if (i !== index){\n                    console.log(\"OOO\" + i, index);  \n                    next_word_to_guess_from[i] = '.';\n                    //coloration au niveau HTML\n                    let yellow_square_index = this._word_length*(this.state.turn_index - 1) + i;\n                    let yellow_square = document.getElementById(yellow_square_index.toString()) as HTMLElement;\n                    yellow_square.style.backgroundColor = \"yellow\";\n                    //modification de la lettre au niveau HTML\n                    let modified_square_index = this._word_length*(this.state.turn_index) + i\n                    const square: HTMLElement = document.getElementById(modified_square_index.toString()) as HTMLElement;\n                    console.log(i, square);\n                    square.innerHTML = '.';\n\n                }\n                else {\n                    next_word_to_guess_from[i] = this._word_to_guess[index];\n                    //coloration dans le DOM\n                }\n                index = this._word_to_guess.indexOf(user_answer[i], index + 1);\n\n            }\n            //i == - 1 : à sa position, dans le dom, on aura un point\n        }\n\n        let first_letter = document.getElementById((this._word_length*this.state.turn_index).toString()) as HTMLElement;\n        first_letter.innerHTML = next_word_to_guess_from[0];\n        this.setState({letter_position: this._word_length * this.state.turn_index});\n        this.setState({turn_index: this.state.turn_index+1});\n\n        \n        console.log(\"prout\" + this.state.current_user_word);\n    }\n    /**\n     * \n     * @param keyPressed\n     * @param letter_position \n     */\n    modifyLetter(keyPressed: string, letter_position: number): void{\n\n        const square = document.getElementById(letter_position.toString()) as HTMLElement;\n        square.innerHTML = keyPressed.toUpperCase();\n\n        //This allows us to use the modifyLetter method to handle the backspace presses\n        let magic = keyPressed === '.' ? -1 : 1\n        this.setState({letter_position: this.state.letter_position + magic});\n        this.updateUserWord(keyPressed, this.state.letter_position + magic);\n        //TODO: une fonction de création d'un nouvel array avec la nouvelle lettre: args = lettre et id courant\n\n\n    }\n    /**\n     * This method is used to handle special characters: Enter, and Backspace, \n     * as they allow the user to either validate a word, or delete a letter from it.\n     * @param p the special key pressed by the user.\n     */\n    handleSpecialCharacters(p: string): void{\n        if (p === \"Enter\"){\n            if (this.state.letter_position !== this._word_length)\n                console.log(\"Mot incomplet\");    \n            else {\n                this.checkAnswer();\n            }\n        }\n\n        else if (p === \"Backspace\"){\n            console.log(\"bp\")\n            if (this.state.letter_position> 1){\n                \n                this.modifyLetter('.', this.state.letter_position -1)\n\n            }\n        }\n    \n    }\n\n    //Method used to handle keyboard inputs\n    handleKeyboardInput(event: KeyboardEvent): void{\n\n        let p = event.key;\n\n        if (this.state.letter_position%this._word_length !== 0){\n\n            console.log(p);\n\n            let regexp = /^[a-zA-Z]+$/\n\n            let a = regexp.test(p);\n        \n            if (a && p.length < 2){\n                this.modifyLetter(p, this.state.letter_position);\n            }\n        }\n        this.handleSpecialCharacters(p);\n    }\n\n\n    componentDidMount(){\n        window.addEventListener(\"keyup\", (event) => {\n            this.handleKeyboardInput(event);\n        });\n\n        let beginning_array = this.state.current_user_word;\n        beginning_array.push(this._word_to_guess.charAt(0));\n        this.setState({current_user_word: beginning_array});\n    }\n\n    render(){\n\n        return (\n            <div>\n                <Board word_length={this._word_length} word={this._word_to_guess} />\n                <p>{this._word_to_guess}</p>\n\n            </div>\n        );\n    }\n}\n\n\n\n\n\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}