{"ast":null,"code":"var _jsxFileName = \"/home/samy/ESIEE/E5/motus_datafullstack/front/src/components/Game.tsx\";\nimport React from \"react\";\nimport Board from \"./Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //This is where we will query our API to get a word\n    this._word = \"\";\n    this._word_length = 0;\n    this.state = {\n      turns_left: 6,\n      squares_filled: 1\n    };\n    this._word = \"Zobdsddssd\";\n    this._word_length = this._word.length;\n  }\n\n  //Function used to modify the letter of the currentSquare\n  modifyLetter(keyPressed, currentSquareId) {\n    const square = document.getElementById(currentSquareId);\n    square.innerHTML = keyPressed.toUpperCase();\n    this.setState({\n      squares_filled: this.state.squares_filled + 1\n    });\n  }\n  handleSpecialCharacters(p) {\n    if (p === \"Enter\") {}\n  }\n\n  //Method used to handle keyboard inputs\n  handleKeyboardInput(event) {\n    if (this.state.squares_filled !== this._word_length) {\n      let p = event.key;\n      let regexp = /^[a-zA-Z]+$/;\n      let a = regexp.test(p);\n      if (true) {\n        console.log(\"YES\", p);\n        this.modifyLetter(p, this.state.squares_filled.toString());\n      }\n      // else {\n      //     handleSpecialCharacters(p);\n      // }\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keypress\", event => {\n      this.handleKeyboardInput(event);\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        word_length: this._word_length,\n        word: this._word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n  zob() {}\n}\nexport default Game;","map":{"version":3,"names":["React","Board","Game","Component","constructor","props","_word","_word_length","state","turns_left","squares_filled","length","modifyLetter","keyPressed","currentSquareId","square","document","getElementById","innerHTML","toUpperCase","setState","handleSpecialCharacters","p","handleKeyboardInput","event","key","regexp","a","test","console","log","toString","componentDidMount","window","addEventListener","render","zob"],"sources":["/home/samy/ESIEE/E5/motus_datafullstack/front/src/components/Game.tsx"],"sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\n\ntype GameState = {\n    turns_left: number,\n    squares_filled: 1\n  }\n\n\nclass Game extends React.Component {\n\n    private _word: string = \"\";\n    private _word_length: number = 0;\n    \n    state: GameState = {\n        turns_left: 6,\n        squares_filled: 1\n    }\n\n    constructor(props: {} | Readonly<{}>){\n        super(props);\n\n        //This is where we will query our API to get a word\n        this._word = \"Zobdsddssd\";\n        this._word_length = this._word.length;\n\n    }\n\n\n\n    //Function used to modify the letter of the currentSquare\n    modifyLetter(keyPressed: string, currentSquareId: string): void{\n\n        const square = document.getElementById(currentSquareId) as HTMLElement;\n        square.innerHTML = keyPressed.toUpperCase();\n        this.setState({squares_filled: this.state.squares_filled + 1})\n\n    }\n\n    handleSpecialCharacters(p){\n        if (p === \"Enter\"){\n\n        }\n    \n    }\n\n    //Method used to handle keyboard inputs\n    handleKeyboardInput(event: KeyboardEvent): void{\n\n        if (this.state.squares_filled !== this._word_length){\n            let p = event.key;\n\n            let regexp = /^[a-zA-Z]+$/\n\n            let a = regexp.test(p);\n        \n            if (true){\n                console.log(\"YES\", p);\n                this.modifyLetter(p, this.state.squares_filled.toString())\n            }\n            // else {\n            //     handleSpecialCharacters(p);\n            // }\n        }\n    }\n\n        \n\n\n    componentDidMount(){\n        \n        window.addEventListener(\"keypress\", (event) => {\n\n            this.handleKeyboardInput(event);\n\n        })\n\n    }\n\n    render(){\n\n        return (\n            <div>\n                <Board word_length={this._word_length} word={this._word} />\n            </div>\n        );\n    }\n\n    zob() {\n\n    }\n\n\n}\n\n\n\n\n\nexport default Game;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAAC;AAQ5B,MAAMC,IAAI,SAASF,KAAK,CAACG,SAAS,CAAC;EAU/BC,WAAW,CAACC,KAAwB,EAAC;IACjC,KAAK,CAACA,KAAK,CAAC;;IAEZ;IAAA,KAXIC,KAAK,GAAW,EAAE;IAAA,KAClBC,YAAY,GAAW,CAAC;IAAA,KAEhCC,KAAK,GAAc;MACfC,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE;IACpB,CAAC;IAMG,IAAI,CAACJ,KAAK,GAAG,YAAY;IACzB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACD,KAAK,CAACK,MAAM;EAEzC;;EAIA;EACAC,YAAY,CAACC,UAAkB,EAAEC,eAAuB,EAAO;IAE3D,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAACH,eAAe,CAAgB;IACtEC,MAAM,CAACG,SAAS,GAAGL,UAAU,CAACM,WAAW,EAAE;IAC3C,IAAI,CAACC,QAAQ,CAAC;MAACV,cAAc,EAAE,IAAI,CAACF,KAAK,CAACE,cAAc,GAAG;IAAC,CAAC,CAAC;EAElE;EAEAW,uBAAuB,CAACC,CAAC,EAAC;IACtB,IAAIA,CAAC,KAAK,OAAO,EAAC,CAElB;EAEJ;;EAEA;EACAC,mBAAmB,CAACC,KAAoB,EAAO;IAE3C,IAAI,IAAI,CAAChB,KAAK,CAACE,cAAc,KAAK,IAAI,CAACH,YAAY,EAAC;MAChD,IAAIe,CAAC,GAAGE,KAAK,CAACC,GAAG;MAEjB,IAAIC,MAAM,GAAG,aAAa;MAE1B,IAAIC,CAAC,GAAGD,MAAM,CAACE,IAAI,CAACN,CAAC,CAAC;MAEtB,IAAI,IAAI,EAAC;QACLO,OAAO,CAACC,GAAG,CAAC,KAAK,EAAER,CAAC,CAAC;QACrB,IAAI,CAACV,YAAY,CAACU,CAAC,EAAE,IAAI,CAACd,KAAK,CAACE,cAAc,CAACqB,QAAQ,EAAE,CAAC;MAC9D;MACA;MACA;MACA;IACJ;EACJ;;EAKAC,iBAAiB,GAAE;IAEfC,MAAM,CAACC,gBAAgB,CAAC,UAAU,EAAGV,KAAK,IAAK;MAE3C,IAAI,CAACD,mBAAmB,CAACC,KAAK,CAAC;IAEnC,CAAC,CAAC;EAEN;EAEAW,MAAM,GAAE;IAEJ,oBACI;MAAA,uBACI,QAAC,KAAK;QAAC,WAAW,EAAE,IAAI,CAAC5B,YAAa;QAAC,IAAI,EAAE,IAAI,CAACD;MAAM;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACzD;EAEd;EAEA8B,GAAG,GAAG,CAEN;AAGJ;AAMA,eAAelC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}