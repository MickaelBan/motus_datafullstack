{"ast":null,"code":"var _jsxFileName = \"/home/samy/ESIEE/E5/motus_datafullstack/front/src/components/Game.tsx\";\nimport React from \"react\";\nimport Board from \"./Board\";\n\n/**\n * turn_index: the current game turn of the user\n * squares_filled: the number of letter inputs provided by the user\n * current_word: a representation of the current word typed by the user\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //This is where we will query our API to get a word\n    this._word_to_guess = \"\";\n    this._word_length = 0;\n    this.state = {\n      turn_index: 1,\n      squares_filled: 1,\n      current_word: Array().fill('.')\n    };\n    this._word_to_guess = \"Zobdsddssd\";\n    this._word_length = this._word_to_guess.length;\n  }\n\n  /**\n   * \n   * @param keyPressed\n   * @param currentSquareId \n   */\n  modifyLetter(keyPressed, currentSquareId) {\n    const square = document.getElementById(currentSquareId);\n    square.innerHTML = keyPressed.toUpperCase();\n    this.setState({\n      squares_filled: this.state.squares_filled + 1\n    });\n  }\n  /**\n   * This method is used to handle special characters: Enter, and Backspace, \n   * as they allow the user to either validate a word, or delete a letter from it.\n   * @param p the special key pressed by the user.\n   */\n  handleSpecialCharacters(p) {\n    if (p === \"Enter\") {\n      if (this.state.squares_filled !== this._word_length) console.log(\"Mot incomplet\");else {\n        //TODO: comparer les bons mots\n      }\n    } else if (p === \"Backspace\") {\n      console.log(\"bp\");\n      if (this.state.squares_filled > 1) {\n        let lastModifiedSquare = (this.state.squares_filled - 1).toString();\n        const square = document.getElementById(lastModifiedSquare);\n        square.innerHTML = \".\";\n        this.setState({\n          squares_filled: this.state.squares_filled - 1\n        });\n      }\n    }\n  }\n\n  //Method used to handle keyboard inputs\n  handleKeyboardInput(event) {\n    let p = event.key;\n    if (this.state.squares_filled !== this._word_length) {\n      console.log(p);\n      let regexp = /^[a-zA-Z]+$/;\n      let a = regexp.test(p);\n      if (a && p.length < 2) {\n        console.log(\"YES\", p);\n        this.modifyLetter(p, this.state.squares_filled.toString());\n      }\n    }\n    this.handleSpecialCharacters(p);\n  }\n  componentDidMount() {\n    window.addEventListener(\"keydown\", event => {\n      this.handleKeyboardInput(event);\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        word_length: this._word_length,\n        word: this._word_to_guess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Game;","map":{"version":3,"names":["React","Board","Game","Component","constructor","props","_word_to_guess","_word_length","state","turn_index","squares_filled","current_word","Array","fill","length","modifyLetter","keyPressed","currentSquareId","square","document","getElementById","innerHTML","toUpperCase","setState","handleSpecialCharacters","p","console","log","lastModifiedSquare","toString","handleKeyboardInput","event","key","regexp","a","test","componentDidMount","window","addEventListener","render"],"sources":["/home/samy/ESIEE/E5/motus_datafullstack/front/src/components/Game.tsx"],"sourcesContent":["import React from \"react\";\nimport Board from \"./Board\";\n\n/**\n * turn_index: the current game turn of the user\n * squares_filled: the number of letter inputs provided by the user\n * current_word: a representation of the current word typed by the user\n */\ntype GameState = {\n    turn_index: number\n    squares_filled: number,\n    current_word: Array<String>\n  }\n\n\nclass Game extends React.Component {\n\n    private _word_to_guess: string = \"\";\n    private _word_length: number = 0;\n    \n    state: GameState = {\n        turn_index: 1,\n        squares_filled: 1,\n        current_word: Array().fill('.')\n    }\n\n    constructor(props: {} | Readonly<{}>){\n        super(props);\n\n        //This is where we will query our API to get a word\n        this._word_to_guess = \"Zobdsddssd\";\n\n        this._word_length = this._word_to_guess.length;\n\n    }\n\n\n\n    /**\n     * \n     * @param keyPressed\n     * @param currentSquareId \n     */\n    modifyLetter(keyPressed: string, currentSquareId: string): void{\n\n        const square = document.getElementById(currentSquareId) as HTMLElement;\n        square.innerHTML = keyPressed.toUpperCase();\n        this.setState({squares_filled: this.state.squares_filled + 1})\n\n    }\n    /**\n     * This method is used to handle special characters: Enter, and Backspace, \n     * as they allow the user to either validate a word, or delete a letter from it.\n     * @param p the special key pressed by the user.\n     */\n    handleSpecialCharacters(p: String): void{\n        if (p === \"Enter\"){\n            if (this.state.squares_filled !== this._word_length)\n                console.log(\"Mot incomplet\");    \n            else {\n                //TODO: comparer les bons mots\n            }\n        }\n\n        else if (p === \"Backspace\"){\n            console.log(\"bp\")\n            if (this.state.squares_filled > 1){\n\n                let lastModifiedSquare = (this.state.squares_filled - 1).toString()\n\n                const square = document.getElementById(lastModifiedSquare) as HTMLElement;\n                square.innerHTML = \".\";\n                this.setState({squares_filled: this.state.squares_filled - 1})\n            }\n        }\n    \n    }\n\n    //Method used to handle keyboard inputs\n    handleKeyboardInput(event: KeyboardEvent): void{\n\n        let p = event.key;\n\n        if (this.state.squares_filled !== this._word_length){\n\n            console.log(p);\n\n            let regexp = /^[a-zA-Z]+$/\n\n            let a = regexp.test(p);\n        \n            if (a && p.length < 2){\n                console.log(\"YES\", p);\n                this.modifyLetter(p, this.state.squares_filled.toString())\n            }\n        }\n        this.handleSpecialCharacters(p)\n    }\n\n        \n\n\n    componentDidMount(){\n        \n        window.addEventListener(\"keydown\", (event) => {\n\n            this.handleKeyboardInput(event);\n\n        })\n\n    }\n\n    render(){\n\n        return (\n            <div>\n                <Board word_length={this._word_length} word={this._word_to_guess} />\n            </div>\n        );\n    }\n\n\n}\n\n\n\n\n\nexport default Game;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;;AAE3B;AACA;AACA;AACA;AACA;AAJA;AAYA,MAAMC,IAAI,SAASF,KAAK,CAACG,SAAS,CAAC;EAW/BC,WAAW,CAACC,KAAwB,EAAC;IACjC,KAAK,CAACA,KAAK,CAAC;;IAEZ;IAAA,KAZIC,cAAc,GAAW,EAAE;IAAA,KAC3BC,YAAY,GAAW,CAAC;IAAA,KAEhCC,KAAK,GAAc;MACfC,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE,CAAC;MACjBC,YAAY,EAAEC,KAAK,EAAE,CAACC,IAAI,CAAC,GAAG;IAClC,CAAC;IAMG,IAAI,CAACP,cAAc,GAAG,YAAY;IAElC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACD,cAAc,CAACQ,MAAM;EAElD;;EAIA;AACJ;AACA;AACA;AACA;EACIC,YAAY,CAACC,UAAkB,EAAEC,eAAuB,EAAO;IAE3D,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAACH,eAAe,CAAgB;IACtEC,MAAM,CAACG,SAAS,GAAGL,UAAU,CAACM,WAAW,EAAE;IAC3C,IAAI,CAACC,QAAQ,CAAC;MAACb,cAAc,EAAE,IAAI,CAACF,KAAK,CAACE,cAAc,GAAG;IAAC,CAAC,CAAC;EAElE;EACA;AACJ;AACA;AACA;AACA;EACIc,uBAAuB,CAACC,CAAS,EAAO;IACpC,IAAIA,CAAC,KAAK,OAAO,EAAC;MACd,IAAI,IAAI,CAACjB,KAAK,CAACE,cAAc,KAAK,IAAI,CAACH,YAAY,EAC/CmB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAAC,KAC5B;QACD;MAAA;IAER,CAAC,MAEI,IAAIF,CAAC,KAAK,WAAW,EAAC;MACvBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjB,IAAI,IAAI,CAACnB,KAAK,CAACE,cAAc,GAAG,CAAC,EAAC;QAE9B,IAAIkB,kBAAkB,GAAG,CAAC,IAAI,CAACpB,KAAK,CAACE,cAAc,GAAG,CAAC,EAAEmB,QAAQ,EAAE;QAEnE,MAAMX,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAACQ,kBAAkB,CAAgB;QACzEV,MAAM,CAACG,SAAS,GAAG,GAAG;QACtB,IAAI,CAACE,QAAQ,CAAC;UAACb,cAAc,EAAE,IAAI,CAACF,KAAK,CAACE,cAAc,GAAG;QAAC,CAAC,CAAC;MAClE;IACJ;EAEJ;;EAEA;EACAoB,mBAAmB,CAACC,KAAoB,EAAO;IAE3C,IAAIN,CAAC,GAAGM,KAAK,CAACC,GAAG;IAEjB,IAAI,IAAI,CAACxB,KAAK,CAACE,cAAc,KAAK,IAAI,CAACH,YAAY,EAAC;MAEhDmB,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;MAEd,IAAIQ,MAAM,GAAG,aAAa;MAE1B,IAAIC,CAAC,GAAGD,MAAM,CAACE,IAAI,CAACV,CAAC,CAAC;MAEtB,IAAIS,CAAC,IAAIT,CAAC,CAACX,MAAM,GAAG,CAAC,EAAC;QAClBY,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,CAAC,CAAC;QACrB,IAAI,CAACV,YAAY,CAACU,CAAC,EAAE,IAAI,CAACjB,KAAK,CAACE,cAAc,CAACmB,QAAQ,EAAE,CAAC;MAC9D;IACJ;IACA,IAAI,CAACL,uBAAuB,CAACC,CAAC,CAAC;EACnC;EAKAW,iBAAiB,GAAE;IAEfC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAGP,KAAK,IAAK;MAE1C,IAAI,CAACD,mBAAmB,CAACC,KAAK,CAAC;IAEnC,CAAC,CAAC;EAEN;EAEAQ,MAAM,GAAE;IAEJ,oBACI;MAAA,uBACI,QAAC,KAAK;QAAC,WAAW,EAAE,IAAI,CAAChC,YAAa;QAAC,IAAI,EAAE,IAAI,CAACD;MAAe;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QAClE;EAEd;AAGJ;AAMA,eAAeJ,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}